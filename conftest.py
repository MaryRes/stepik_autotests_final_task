"""
CONFTEST.PY - –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø PYTEST –ò –§–ò–ö–°–¢–£–†–´ –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø

–î–∞–Ω–Ω—ã–π –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç:
- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–ª—è pytest
- –§–∏–∫—Å—Ç—É—Ä—É –±—Ä–∞—É–∑–µ—Ä–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤ –∏ —è–∑—ã–∫–æ–≤
- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é WebDriver Manager –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞–º–∏
"""

import pytest
import logging
from selenium import webdriver
from webdriver_manager.firefox import GeckoDriverManager
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.firefox.service import Service as FirefoxService
from selenium.webdriver.chrome.service import Service as ChromeService
from selenium.webdriver.chrome.options import Options as ChromeOptions
from selenium.webdriver.firefox.options import Options as FirefoxOptions
from typing import Generator, Any

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)


def pytest_addoption(parser: pytest.Parser) -> None:
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—ã–µ –æ–ø—Ü–∏–∏ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–ª—è pytest.

    Args:
        parser: –ü–∞—Ä—Å–µ—Ä –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ pytest
    """
    parser.addoption(
        '--browser_name',
        action='store',
        default="chrome",
        choices=["chrome", "firefox"],
        help="–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–∞—É–∑–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–æ–≤: chrome –∏–ª–∏ firefox"
    )
    parser.addoption(
        '--language',
        action='store',
        default='en',
        help='–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: en, ru, es, fi, fr, de –∏ —Ç.–¥.'
    )
    parser.addoption(
        '--headless',
        action='store_true',
        default=False,
        help='–ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞ –≤ headless-—Ä–µ–∂–∏–º–µ (–±–µ–∑ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞)'
    )


@pytest.fixture(scope="function")
def browser(request: pytest.FixtureRequest) -> Generator[webdriver.Remote, None, None]:
    """
    –§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –∑–∞–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞.

    –°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –±—Ä–∞—É–∑–µ—Ä–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –µ–≥–æ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞.

    Args:
        request: –û–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞ —Ñ–∏–∫—Å—Ç—É—Ä—ã pytest

    Yields:
        webdriver.Remote: –≠–∫–∑–µ–º–ø–ª—è—Ä WebDriver –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

    Raises:
        pytest.UsageError: –ü—Ä–∏ —É–∫–∞–∑–∞–Ω–∏–∏ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞
    """
    browser_name = request.config.getoption("browser_name")
    user_language = request.config.getoption("language")
    headless = request.config.getoption("headless")

    logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞: %s, —è–∑—ã–∫: %s", browser_name, user_language)

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞
    driver = get_browser_settings(browser_name, user_language, headless)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ—è–≤–Ω—ã–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    driver.implicitly_wait(10)

    # –ú–∞–∫—Å–∏–º–∏–∑–∏—Ä—É–µ–º –æ–∫–Ω–æ –±—Ä–∞—É–∑–µ—Ä–∞
    driver.maximize_window()

    yield driver

    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±—Ä–∞—É–∑–µ—Ä–∞
    logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±—Ä–∞—É–∑–µ—Ä–∞")
    print("\nquit browser..")
    driver.quit()


def get_browser_settings(
        browser_name: str = 'chrome',
        user_language: str = 'en',
        headless: bool = False
) -> webdriver.Remote:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä WebDriver —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.

    Args:
        browser_name: –ù–∞–∑–≤–∞–Ω–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞ ('chrome' –∏–ª–∏ 'firefox')
        user_language: –Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –±—Ä–∞—É–∑–µ—Ä–∞
        headless: –§–ª–∞–≥ headless-—Ä–µ–∂–∏–º–∞

    Returns:
        webdriver.Remote: –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä WebDriver

    Raises:
        pytest.UsageError: –ü—Ä–∏ —É–∫–∞–∑–∞–Ω–∏–∏ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞
    """
    if browser_name == "chrome":
        logger.debug("üöÄ –ó–∞–ø—É—Å–∫ Chrome –±—Ä–∞—É–∑–µ—Ä–∞ —Å —è–∑—ã–∫–æ–º: %s", user_language)
        chrome_options = ChromeOptions()

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —è–∑—ã–∫–∞
        chrome_options.add_experimental_option('prefs', {
            'intl.accept_languages': f'en,{user_language}'
        })

        # Headless —Ä–µ–∂–∏–º
        if headless:
            chrome_options.add_argument('--headless=new')
            chrome_options.add_argument('--no-sandbox')
            chrome_options.add_argument('--disable-dev-shm-usage')

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        chrome_options.add_argument('--disable-gpu')
        chrome_options.add_argument('--window-size=1920,1080')
        chrome_options.add_argument('--disable-infobars')
        chrome_options.add_argument('--disable-extensions')

        browser = webdriver.Chrome(
            service=ChromeService(ChromeDriverManager().install()),
            options=chrome_options
        )

    elif browser_name == "firefox":
        logger.debug("üöÄ –ó–∞–ø—É—Å–∫ Firefox –±—Ä–∞—É–∑–µ—Ä–∞ —Å —è–∑—ã–∫–æ–º: %s", user_language)
        firefox_options = FirefoxOptions()

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —è–∑—ã–∫–∞
        firefox_options.set_preference('intl.accept_languages', f'en,{user_language}')

        # Headless —Ä–µ–∂–∏–º
        if headless:
            firefox_options.add_argument('--headless')

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        firefox_options.set_preference('dom.webnotifications.enabled', False)

        browser = webdriver.Firefox(
            service=FirefoxService(GeckoDriverManager().install()),
            options=firefox_options
        )

    else:
        error_msg = f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –±—Ä–∞—É–∑–µ—Ä: {browser_name}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ chrome –∏–ª–∏ firefox"
        logger.error(error_msg)
        raise pytest.UsageError(error_msg)

    return browser


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ö—É–∫–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
def pytest_configure(config: pytest.Config) -> None:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è pytest –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ."""
    config.addinivalue_line(
        "markers", "slow: –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∞ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ (–ø—Ä–æ–ø—É—Å–∫–∞—Ç—å –ø—Ä–∏ --fast)"
    )


def pytest_sessionstart(session: pytest.Session) -> None:
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ç–µ—Å—Ç–æ–≤–æ–π —Å–µ—Å—Å–∏–∏."""
    logger.info("üé¨ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–æ–≤–æ–π —Å–µ—Å—Å–∏–∏")


def pytest_sessionfinish(session: pytest.Session, exitstatus: int) -> None:
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–π —Å–µ—Å—Å–∏–∏."""
    logger.info("üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ —Å —Å—Ç–∞—Ç—É—Å–æ–º: %s", exitstatus)
